# roles/customization/tasks/main.yml

### CUSTOMIZATION ###
---
  # APT INSTALL GIT & ZSH
- name: install software
  become: true
  package:
    update-cache: true
    name: '{{ item }}'
    state: present
  with_items:
    - git
    - zsh
    - mc
    - ncdu

- name: Create config/mc directory if it does not exist
  file:
    path: /home/pi/.config/mc/
    state: directory
    owner: pi
    group: pi
    mode: 0700

  # CREATE MC PANELS.INI
- name: golden mc panels
  template:
    src: ../../../templates/panels.ini
    dest: /home/pi/.config/mc/panels.ini
    owner: pi
    group: pi
    mode: 0644

  # CREATE MC INI
- name: golden mc ini
  template:
    src: ../../../templates/ini
    dest: /home/pi/.config/mc/ini
    owner: pi
    group: pi
    mode: 0644

  #CREATE REPO DIRECTORY
- name: Creates repos directory
  file:
    path: /home/pi/repos
    state: directory
    owner: pi
    group: pi
    mode: 0755

  # CHECK IF OH-MY-ZSH EXISTS
- name: stat oh-my-zsh - check if exists
  stat:
    path=/home/pi/.oh-my-zsh
  register: stat1_result

- git:
    repo: 'https://github.com/robbyrussell/oh-my-zsh.git'
    dest:  /home/pi/.oh-my-zsh
  become_user: 'pi'
  when: stat1_result.stat.exists == False

  # SET PERMISSIONS FOR ZSH USERS
- name: set permissions of oh-my-zsh for users
  file:
    path: '/home/pi/.oh-my-zsh'
    # Prevent the cloned repository from having insecure permissions. Failing to do
    # so causes compinit() calls to fail with "command not found: compdef" errors
    # for users with insecure umasks (e.g., "002", allowing group writability).
    mode: 'go-w'
    recurse: yes

  # GOLDEN ZSH TEMPLATE
- name: golden .zshrc
  template:
    src: ../../../templates/.zshrc
    dest: /home/pi/.zshrc
    owner: pi
    group: pi
    mode: 0644

  # GOLDEN THEME FOR ZSH - RACOTECNIC
- name: golden theme for oh my zsh
  become: true
  template:
    src: ../../../templates/racotecnic.zsh-theme
    dest: /home/pi/.oh-my-zsh/themes/racotecnic.zsh-theme
    owner: pi

  # SET ZSH AS DEFAULT SHELL FOR PI USER
- name: set zsh default shell for pi user
  user:
    name: 'pi'
    shell: /bin/zsh

- name: Add a new user named homepi
  user:
    name=homepi

- name: Add homepi user to the sudoers
  copy:
    dest: "/etc/sudoers.d/homepi"
    content: "homepi  ALL=(ALL)  NOPASSWD: ALL"

- name: Deploy SSH Key
  authorized_key: user=homepi
                     key="{{ lookup('file', '~/.ssh/home.pub') }}"
                     state=present

- name: Disable Password Authentication
  lineinfile:
       dest=/etc/ssh/sshd_config
       regexp='^PasswordAuthentication'
       line="PasswordAuthentication no"
       state=present
       backup=yes
  register: task_result

- name: restart ssh
  service:
    name=sshd
    state=restarted

  # ONLY REBOOTS IF GOLDEN .ZSHRC CHANGEd.
- name: Reboot if disableld password
  reboot:
    pre_reboot_delay: 3
    msg: "Reboot - initiated by Ansible"
    test_command: uptime
  when: task_result is changed
